nsphp: a PHP module for NaviServer
==================================

1) To compile PHP as a module for NaviServer, you need:
-------------------------------------------------------

- installed NaviServer 4.99 or later
- PHP 7.x or later (tested with 7.3.5)

It has been tested with Drupal, RoundCube webmail, MailBee webmail,
Mambo, Horder/IMP, MediaWiki, PmWiki


2) Compiling PHP
----------------

  This modules requires a PHP with ZTS (Zend Thread Safety) and
  pthreads support.  If the version of PHP installed on your system
  does not have TZS enabled, you have to compile PHP locally. For unix
  systems, it is uncommon to get precompiled PHP insallations with ZTS
  enabled (see [1]). When one tries to compile the nsphp module with a
  PHP installation without ZTS support, the compilation will output
  the error message

     #error Naviserver module is only usable in thread-safe mode

  The Makefile of this module provides support for building
  PHP with ZTS support. Note that PHP has a very long list of
  build-options and you might have to adjust this list by
  shortening or extending the configure options according
  to your application needs.

  PHP can be build from the nsphp directory via

      $ make php

  This command will download and build PHP as shared library and
  install it under /usr/local/ns/php and compile nsphp against it.

  Note that you might have to install some more packages on your
  system in case some of the configured libraries for PHP are
  missing. You can also fix such issues by shortening the configure
  options. In case, more package should be included in PHP, consider
  adding more options to the PHP_extraflags in the Makefile.

  [1] https://www.slideshare.net/jpauli/php-and-threads-zts


3) Building the NaviServer nsphp modules
----------------------------------------

  When building the nsphp module you must tell it where the NaviServer
  and php you would like to use are installed:

      make NAVISERVER=/usr/local/ns PHP_CONFIG=/usr/local/ns/php/bin/php-config


4) Changing the NaviServer configuration file
---------------------------------------------

### a) Enabling PHP

  To enable the nsphp module in the configuration file,
  add the following the load the module to the "modules"
  section of the server.

    ns_section	"ns/server/${server}/modules"
    ns_param    nsphp	${home}/bin/libphp.so

### b) Configure the nsphp modules

  To configure nsphp, add a new section like the following: The 'map'
  command will cause NaviServer to pass all requests for files ending
  with *.php to nsphp. (can be specified multiple times).
  Example:

    ns_section	"ns/server/${server}/module/nsphp"
    ns_param	map	*.php


5) Calling PHP Scripts from Tcl
-------------------------------

The following Tcl commands can be used to call PHP or or get
information from PHP:

  * `ns_php version`

     Return PHP version

  * `ns_php eval` string

     Evaluate PHP expression and return result

  * `ns_php evalfile` filename

     Evaluate specified PHP file

  * `ns_php var` varname

     Returns value of the PHP variable



6) Native PHP functions
-----------------------

The following PHP function can be used to call into Tcl and NaviServer:

  * `ns_header(name);`

     Returns HTTP header

  * `ns_eval(Tcl_script);`

     Evaluate Tcl code from PHP script and return result as string

  * `ns_log(severity, string);`

     Put string in the server log, severity is one of
     'Notice', 'Warning', 'Error', 'Debug', 'Fatal'

  * `ns_info(name);`

    Returns information, name can be one of:
	address, boottime, builddate, threads,
	config, home, hostname, locks, log,
	major, minor, name, nsd, pageroot, patchlevel,
	pid, platform, tag, uptime, version, winnt

  * `ns_conn(name);`

    Returns info about current connection, name can be one of:
	authpassword, authuser, close, content, contentlength,
	copy, driver, encoding, flags,
	host, id, isconnected, location, method,
	peeraddr, peerport, port, protocol, query, request,
	server, sock, start, status, url, urlc, urlencoding,
	urlv, version,

  * `ns_headers();`

    Returns input headers as an array

  * `ns_outputheaders();`

    Returns output headers as an array

  * `ns_returnredirect(url);`

    Performs HTTP redirection
 
 * `ns_returndata(status, type, data);`
 * `ns_returnfile(status, type, file);`

    Return data or file contents, status is HTTP status like 200, type
    is content type like text/html


 * `ns_queryexists(name);`

    Returns 1 if query parameter exists in the request

 * `ns_queryget(name);` 

    Returns value of the query parameter

 * `ns_querygetall();` 

    Returns all query parameters as an array

 * `nsv_get(array, key);`
 * `nsv_set(array, key, value);`
 * `nsv_incr(array, key, count);`
 * `nsv_append(array, key, value);`
 * `nsv_exists(array, key);`
 * `nsv_unset(array, key);`

    Interface to NSV arrays of the NaviServer, array is name of the array, all
    functions except last 2 will create array if it does not exists. Values in NSV arrays
    can be shared with Tcl and other connections.


7) PDO driver for `ns_db`
-------------------------

  This module implements internal PDO driver which uses the same ns_db handles and pools as
  the rest of NaviServer.

  To allocate DB handle use:

     $db = new PDO("naviserver:poolname");

  where "naviserver" is PDO driver name and "poolname" is any pool defined
  in the NaviServer configuration file (e.g. nsd.tcl). After that is works
  the same way as other PHP PDO drivers.

  The limitations are:
 * all values are strings
 * no native bind parameters, it uses PHP/PDO bind emulation
